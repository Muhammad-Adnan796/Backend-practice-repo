const SendResponse = require("../helpers/helpers");
const UserModel = require("../models/usersModel"); // Assuming the User model is in a separate file

/* const users = [
  {
    id: 1,
    name: "John Doe",
    fatherName: "Michael Doe",
    userInstituteName: "ABC University",
    age: 25,
  },
  {
    id: 2,
    name: "Jane Smith",
    fatherName: "Robert Smith",
    userInstituteName: "XYZ College",
    age: 30,
  },
  {
    id: 3,
    name: "Alice Johnson",
    fatherName: "David Johnson",
    userInstituteName: "PQR School",
    age: 22,
  },
  {
    id: 4,
    name: "Emily Brown",
    fatherName: "Andrew Brown",
    userInstituteName: "LMN Institute",
    age: 28,
  },
  {
    id: 5,
    name: "William Wilson",
    fatherName: "George Wilson",
    userInstituteName: "UVW College",
    age: 26,
  },
  {
    id: 6,
    name: "Olivia Garcia",
    fatherName: "Jose Garcia",
    userInstituteName: "RST University",
    age: 29,
  },
  {
    id: 7,
    name: "Daniel Martinez",
    fatherName: "Luis Martinez",
    userInstituteName: "EFG School",
    age: 24,
  },
  {
    id: 8,
    name: "Sophia Anderson",
    fatherName: "William Anderson",
    userInstituteName: "IJK College",
    age: 27,
  },
  {
    id: 9,
    name: "David Thomas",
    fatherName: "Richard Thomas",
    userInstituteName: "OPQ University",
    age: 31,
  },
  {
    id: 10,
    name: "Emma Taylor",
    fatherName: "Thomas Taylor",
    userInstituteName: "GHI Institute",
    age: 23,
  },
  {
    id: 11,
    name: "Liam Jackson",
    fatherName: "Charles Jackson",
    userInstituteName: "MNO College",
    age: 26,
  },
  {
    id: 12,
    name: "Ava White",
    fatherName: "Benjamin White",
    userInstituteName: "STU University",
    age: 30,
  },
  {
    id: 13,
    name: "Mia Harris",
    fatherName: "Scott Harris",
    userInstituteName: "JKL School",
    age: 28,
  },
  {
    id: 14,
    name: "Noah Martin",
    fatherName: "Kevin Martin",
    userInstituteName: "VWX College",
    age: 29,
  },
  {
    id: 15,
    name: "Isabella Thompson",
    fatherName: "Mark Thompson",
    userInstituteName: "QRS Institute",
    age: 25,
  },
  {
    id: 16,
    name: "James Garcia",
    fatherName: "Raymond Garcia",
    userInstituteName: "XYZ University",
    age: 24,
  },
  {
    id: 17,
    name: "Ethan Clark",
    fatherName: "Donald Clark",
    userInstituteName: "ABC School",
    age: 27,
  },
  {
    id: 18,
    name: "Avery Hall",
    fatherName: "Gary Hall",
    userInstituteName: "DEF College",
    age: 23,
  },
  {
    id: 19,
    name: "Harper Adams",
    fatherName: "Lawrence Adams",
    userInstituteName: "GHI University",
    age: 30,
  },
  {
    id: 20,
    name: "Alexander King",
    fatherName: "Peter King",
    userInstituteName: "MNO Institute",
    age: 26,
  },
]; */

const usersController = {
  add: async (req, res) => {
    console.log("Add", req.body)
    let { name, fatherName, userInstituteName, age } = req.body;
    try {
      if (!name || !fatherName || !userInstituteName || !age) {
        return res
          .status(400)
          .send(
            SendResponse(false, "Validation Error: All fields are required")
          );
      }

      const newUser = new UserModel({
        // Assuming the id is auto-generated by Mongoose
        name,
        fatherName,
        userInstituteName,
        age,
      });
      const users = await newUser.save();
      res
        .status(200)
        .send(SendResponse(true, "Data Added successfully", users));
    } catch (error) {
      res.status(500).send(SendResponse(false, "Error adding data"));
    }
  },
  get: async (req, res) => {
    console.log("Get", req.body)
    try {
      const users = await UserModel.find({}); // Fetch all users from the database
      if (users.length > 0) {
        res
          .status(200)
          .send(SendResponse(true, "Users fetched successfully", users));
      } else {
        res.status(404).send(SendResponse(true, "No data found", null));
      }
    } catch (error) {
      res.status(500).send(SendResponse(false, "Error fetching users"));
    }
  },
  getById: async (req, res) => {
    console.log("Get By Id", req.body)
    const userId = req.params.id; // Assuming the user ID is passed as a parameter in the URL
    console.log(userId);
    try {
      const user = await UserModel.findById(userId); // Find a user by the provided ID
      if (user) {
        res.status(200).send(SendResponse(true, "User found", user));
      } else {
        res
          .status(404)
          .send(SendResponse(true, "No user found with the given ID", null));
      }
    } catch (error) {
      res.status(500).send(SendResponse(false, "Error fetching user"));
    }
  },
  editById: async (req, res) => {
    console.log("Edite By Id", req.body)
    const userId = req.params.id;
    const { name, fatherName, userInstituteName, age } = req.body; // New user data
    try {
      const user = await UserModel.findById(userId);
      if (user) {
        // Update user fields with the new data
        user.name = name;
        user.fatherName = fatherName;
        user.userInstituteName = userInstituteName;
        user.age = age;

        const updatedUser = await user.save();
        res
          .status(200)
          .send(SendResponse(true, "User updated successfully", updatedUser));
      } else {
        res
          .status(404)
          .send(SendResponse(true, "No user found with the given ID", null));
      }
    } catch (error) {
      res.status(500).send(SendResponse(false, "Error updating user"));
    }

    /* const userId = parseInt(req.params.id);
    const userData = req.body;
    const userIndex = users.findIndex((user) => user.id === userId);

    if (userIndex !== -1) {
      users.splice(userIndex, 1, { id: userId, ...req.body });
      res.status(200).send({
        success: true,
        message: "User data updated and added to the existing users array",
        updatedUsersArray: userData,
      });
    } else {
      res.status(404).json({ success: false, message: "User not found" });
    } */
  },
  del: async (req, res) => {
    console.log("Delete", req.body)
    const userId = req.params.id;
    try {
      const userDelete = await UserModel.findByIdAndDelete(userId);
      if (userDelete) {
        res
          .status(200)
          .send(SendResponse(true, "User deleted successfully", userId));
      } else {
        res
          .status(404)
          .send(SendResponse(true, "No user found with the given ID", null));
      }
    } catch (error) {
      res.status(500).send(SendResponse(false, "Error deleting user"));
    }
  },
};

module.exports  = usersController;
