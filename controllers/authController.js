const jwt = require("jsonwebtoken");
const SendResponse = require("../helpers/helpers");
const UserAuthModel = require("../models/authModel");
const bcrypt = require("bcrypt");

 const AuthController = {
  signUp: async (req, res) => {
    try {
      const { userName, password, contact } = req.body;
      if (!userName || !password || !contact) {
        return res
          .status(400)
          .send(
            SendResponse(
              false,
              "Validation Error: Title,Price,Description fields are required"
            )
          );
      } else {
        const userExist = await UserAuthModel.findOne({ userName: userName });
        if (userExist) {
          return res
            .status(400)
            .send(
              SendResponse(false, "User already exist with this user name")
            );
        } else {
          const passwordEncrypt = await bcrypt.hash(password, 10);
          const newUser = new UserAuthModel({
            // Assuming the id is auto-generated by Mongoose
            userName,
            password: passwordEncrypt,
            contact,
          });
          const user = await newUser.save();
          if (user) {
            res
              .status(200)
              .send(SendResponse(true, "Data Added successfully", user));
          }
        }
      }
    } catch (error) {
        console.log(error);
      res.status(500).send(SendResponse(true, "Error post data ", null));
    }
  },
  signIn: async (req, res) => {
    try {
      const { userName, password, contact } = req.body;
      const userExist = await UserAuthModel.findOne({ userName: userName });
      if (userExist) {
        let correctPassword = await bcrypt.compare(
          password,
          userExist.password
        );
        if (correctPassword) {
          let token = jwt.sign({ ...userExist }, process.env.SECRET_KEY);

          return res.status(200).send(
            SendResponse(true, "Login Successfully", {
              token: token,
              user: userExist,
            })
          );
        } else {
          return res
            .status(400)
            .send(SendResponse(false, "password does not matched"));
        }
      } else {
        res
          .status(404)
          .send(
            SendResponse(false, "User not found with this user name", users)
          );
      }
    } catch (error) {
        console.log(error);
      res.status(500).send(SendResponse(false, "Error fetching user", null));
    }
  },
  protected: () => {},
};


module.exports =  AuthController;