const jwt = require("jsonwebtoken");
const SendResponse = require("../helpers/helpers");
const UserAuthModel = require("../models/authModel");
require("dotenv").config();
const bcrypt = require("bcrypt");
const cloudinary = require("cloudinary").v2;
          
cloudinary.config({ 
  cloud_name: 'dmdqnzqor', 
  api_key: '673761169784497', 
  api_secret: 'Cf9m-oznhUy8mU_5d9py5JK04qo' 
});

const AuthController = {
  signUp: async (req, res) => {
    try {

      const file = req.files.photos;
      const cloud_Imge = await cloudinary.uploader.upload(file.tempFilePath,(error,result)=>{
        return result;
      })
      console.log(cloud_Imge);
      const { userName, password, contact,image } = req.body;

      if (!userName || !password || !contact || !image) {
        return res
          .status(400)
          .send(
            SendResponse(
              false,
              "Validation Error: Title,Price,Description fields are required"
            )
          );
      } else {
        const userExist = await UserAuthModel.findOne({ userName: userName });
        if (userExist) {
          return res
            .status(400)
            .send(
              SendResponse(false, "User already exist with this user name")
            );
        } else {
          const passwordEncrypt = await bcrypt.hash(password, 10);
          const newUser = new UserAuthModel({
            // Assuming the id is auto-generated by Mongoose
            userName,
            password: passwordEncrypt,
            contact,
            image: cloud_Imge,
          });
          const user = await newUser.save();
          if (user) {
            res
              .status(200)
              .send(SendResponse(true, "Data Added successfully", user));
          }
        }
      }
    } catch (error) {
      console.log(error);
      res.status(500).send(SendResponse(true, "Error post data ", null));
    }
  },
  signIn: async (req, res) => {
    try {
      const { userName, password, contact } = req.body;
      const userExist = await UserAuthModel.findOne({ userName: userName });
      if (userExist) {
        let correctPassword = await bcrypt.compare(
          password,
          userExist.password
        );
        if (correctPassword) {
          let token = jwt.sign({ ...userExist }, process.env.JWT_SECRET_KEY);

          return res.status(200).send(
            SendResponse(true, "Login Successfully", {
              token: token,
              user: userExist,
            })
          );
        } else {
          return res
            .status(400)
            .send(SendResponse(false, "password does not matched"));
        }
      } else {
        res
          .status(404)
          .send(
            SendResponse(false, "User not found with this user name", userExist)
          );
      }
    } catch (error) {
      console.log(error);
      res.status(500).send(SendResponse(false, "Error fetching user", null));
    }
  },
  // addImg: async (req, res) => {
  //   fs.readdirSync("images/").forEach((file) => {
  //     console.log(file);

  //     cloudinary.v2.uploader.upload(`images/${file}`, {}, (error, result) => {
  //       console.log(result, error);
  //       if (error) {
  //         fs.remove(file, (error) => {
  //           if (error) {
  //             return error;
  //           } else {
  //             return res
  //               .status(200)
  //               .send(SendResponse(true, "file removes seccessfully", null));
  //           }
  //         });
  //         return res.status(400).send(SendResponse(false, error.message, null));
  //       } else {
  //         fs.remove(file, (error) => {
  //           if (error) {
  //             return error;
  //           } else {
  //             return res
  //               .status(200)
  //               .send(SendResponse(true, "file removes seccessfully", null));
  //           }
  //         });
  //         return res
  //           .status(200)
  //           .send(SendResponse(false, "Uploaded", { url: result.url }));
  //       }
  //     });
  //   });
  // },
  protected: async (req, res, next) => {
    const { authorization } = req.headers;
    const token = authorization && authorization.split(" ")[1];
    try {
      if (!token) {
        return res
          .status(401)
          .json(
            SendResponse(401, false, "Unauthorized: Token is missing", null)
          );
      } else {
        jwt.verify(token, process.env.JWT_SECRET_KEY, (error, user) => {
          if (error) {
            return res
              .status(403)
              .json(SendResponse(401, false, "Forbidden: Invalid token", null));
          } else {
            next();
          }
        });
      }
    } catch (error) {
      return res.status(500).send(SendResponse(500, false, error.message, null));
    }
  },
  adminProtected: async (req, res, next) => {
    const { authorization } = req.headers;
    const token = authorization && authorization.split(" ")[1];
    try {
      if (!token) {
        return res
          .status(401)
          .json(
            SendResponse(401, false, "Unauthorized: Token is missing", null)
          );
      } else {
        jwt.verify(token, process.env.JWT_SECRET_KEY, (error, user) => {
          if (error) {
            return res
              .status(403)
              .json(SendResponse(401, false, "Forbidden: Invalid token", null));
          } else {
            next();
            return;
          }
        });
      }
    } catch (error) {
      return res.status(401).send();
    }
  },
};

module.exports = AuthController;
